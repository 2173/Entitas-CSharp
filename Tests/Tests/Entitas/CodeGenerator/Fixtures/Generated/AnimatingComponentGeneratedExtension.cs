//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

public partial class Core : Entity {

    static readonly AnimatingComponent animatingComponent = new AnimatingComponent();

    public bool isAnimating {
        get { return HasComponent(CoreComponentIds.Animating); }
        set {
            if(value != isAnimating) {
                if(value) {
                    AddComponent(CoreComponentIds.Animating, animatingComponent);
                } else {
                    RemoveComponent(CoreComponentIds.Animating);
                }
            }
        }
    }

    public Core IsAnimating(bool value) {
        isAnimating = value;
        return this;
    }
}

public partial class CorePool : Pool<Core> {

    public Core animatingEntity { get { return GetGroup(CoreMatcher.Animating).GetSingleEntity(); } }

    public bool isAnimating {
        get { return animatingEntity != null; }
        set {
            var entity = animatingEntity;
            if(value != (entity != null)) {
                if(value) {
                    CreateEntity().isAnimating = true;
                } else {
                    DestroyEntity(entity);
                }
            }
        }
    }
}

public partial class CoreMatcher {

    static IMatcher<Core> _matcherAnimating;

    public static IMatcher<Core> Animating {
        get {
            if(_matcherAnimating == null) {
                var matcher = (Matcher<Core>)Matcher<Core>.AllOf(CoreComponentIds.Animating);
                matcher.componentNames = CoreComponentIds.componentNames;
                _matcherAnimating = matcher;
            }

            return _matcherAnimating;
        }
    }
}
