//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

public partial class Core : Entity {

    public UserComponent user { get { return (UserComponent)GetComponent(CoreComponentIds.User); } }

    public bool hasUser { get { return HasComponent(CoreComponentIds.User); } }

    public Core AddUser(System.DateTime newTimestamp, bool newIsLoggedIn) {
        var component = CreateComponent<UserComponent>(CoreComponentIds.User);
        component.timestamp = newTimestamp;
        component.isLoggedIn = newIsLoggedIn;
        AddComponent(CoreComponentIds.User, component);
        return this;
    }

    public Core ReplaceUser(System.DateTime newTimestamp, bool newIsLoggedIn) {
        var component = CreateComponent<UserComponent>(CoreComponentIds.User);
        component.timestamp = newTimestamp;
        component.isLoggedIn = newIsLoggedIn;
        ReplaceComponent(CoreComponentIds.User, component);
        return this;
    }

    public Core RemoveUser() {
        RemoveComponent(CoreComponentIds.User);
        return this;
    }
}

public partial class CorePool : Pool<Core> {

    public Core userEntity { get { return GetGroup(CoreMatcher.User).GetSingleEntity(); } }

    public UserComponent user { get { return userEntity.user; } }

    public bool hasUser { get { return userEntity != null; } }

    public Core SetUser(System.DateTime newTimestamp, bool newIsLoggedIn) {
        if(hasUser) {
            throw new EntitasException("Could not set user!\n" + this + " already has an entity with UserComponent!",
                "You should check if the pool already has a userEntity before setting it or use pool.ReplaceUser().");
        }
        var entity = CreateEntity();
        entity.AddUser(newTimestamp, newIsLoggedIn);
        return entity;
    }

    public Core ReplaceUser(System.DateTime newTimestamp, bool newIsLoggedIn) {
        var entity = userEntity;
        if(entity == null) {
            entity = SetUser(newTimestamp, newIsLoggedIn);
        } else {
            entity.ReplaceUser(newTimestamp, newIsLoggedIn);
        }

        return entity;
    }

    public void RemoveUser() {
        DestroyEntity(userEntity);
    }
}

public partial class CoreMatcher {

    static IMatcher<Core> _matcherUser;

    public static IMatcher<Core> User {
        get {
            if(_matcherUser == null) {
                var matcher = (Matcher<Core>)Matcher<Core>.AllOf(CoreComponentIds.User);
                matcher.componentNames = CoreComponentIds.componentNames;
                _matcherUser = matcher;
            }

            return _matcherUser;
        }
    }
}
