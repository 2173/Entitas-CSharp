//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

public class PositionComponent : IComponent {
    public IntVector2 value;
}

public partial class VisualDebugging : Entity {

    public PositionComponent position { get { return (PositionComponent)GetComponent(VisualDebuggingComponentIds.Position); } }

    public bool hasPosition { get { return HasComponent(VisualDebuggingComponentIds.Position); } }

    public VisualDebugging AddPosition(IntVector2 newValue) {
        var component = CreateComponent<PositionComponent>(VisualDebuggingComponentIds.Position);
        component.value = newValue;
        AddComponent(VisualDebuggingComponentIds.Position, component);
        return this;
    }

    public VisualDebugging ReplacePosition(IntVector2 newValue) {
        var component = CreateComponent<PositionComponent>(VisualDebuggingComponentIds.Position);
        component.value = newValue;
        ReplaceComponent(VisualDebuggingComponentIds.Position, component);
        return this;
    }

    public VisualDebugging RemovePosition() {
        RemoveComponent(VisualDebuggingComponentIds.Position);
        return this;
    }
}

public partial class VisualDebuggingMatcher {

    static IMatcher<VisualDebugging> _matcherPosition;

    public static IMatcher<VisualDebugging> Position {
        get {
            if(_matcherPosition == null) {
                var matcher = (Matcher<VisualDebugging>)Matcher<VisualDebugging>.AllOf(VisualDebuggingComponentIds.Position);
                matcher.componentNames = VisualDebuggingComponentIds.componentNames;
                _matcherPosition = matcher;
            }

            return _matcherPosition;
        }
    }
}
