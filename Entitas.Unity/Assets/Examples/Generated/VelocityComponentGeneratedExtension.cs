//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

public class VelocityComponent : IComponent {
    public IntVector2 value;
}

public partial class VisualDebugging : Entity {

    public VelocityComponent velocity { get { return (VelocityComponent)GetComponent(VisualDebuggingComponentIds.Velocity); } }

    public bool hasVelocity { get { return HasComponent(VisualDebuggingComponentIds.Velocity); } }

    public VisualDebugging AddVelocity(IntVector2 newValue) {
        var component = CreateComponent<VelocityComponent>(VisualDebuggingComponentIds.Velocity);
        component.value = newValue;
        AddComponent(VisualDebuggingComponentIds.Velocity, component);
        return this;
    }

    public VisualDebugging ReplaceVelocity(IntVector2 newValue) {
        var component = CreateComponent<VelocityComponent>(VisualDebuggingComponentIds.Velocity);
        component.value = newValue;
        ReplaceComponent(VisualDebuggingComponentIds.Velocity, component);
        return this;
    }

    public VisualDebugging RemoveVelocity() {
        RemoveComponent(VisualDebuggingComponentIds.Velocity);
        return this;
    }
}

public partial class VisualDebuggingMatcher {

    static IMatcher<VisualDebugging> _matcherVelocity;

    public static IMatcher<VisualDebugging> Velocity {
        get {
            if(_matcherVelocity == null) {
                var matcher = (Matcher<VisualDebugging>)Matcher<VisualDebugging>.AllOf(VisualDebuggingComponentIds.Velocity);
                matcher.componentNames = VisualDebuggingComponentIds.componentNames;
                _matcherVelocity = matcher;
            }

            return _matcherVelocity;
        }
    }
}
