//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

public partial class VisualDebugging : Entity {

    public GameObjectComponent gameObject { get { return (GameObjectComponent)GetComponent(VisualDebuggingComponentIds.GameObject); } }

    public bool hasGameObject { get { return HasComponent(VisualDebuggingComponentIds.GameObject); } }

    public VisualDebugging AddGameObject(UnityEngine.GameObject newGameObject) {
        var component = CreateComponent<GameObjectComponent>(VisualDebuggingComponentIds.GameObject);
        component.gameObject = newGameObject;
        AddComponent(VisualDebuggingComponentIds.GameObject, component);
        return this;
    }

    public VisualDebugging ReplaceGameObject(UnityEngine.GameObject newGameObject) {
        var component = CreateComponent<GameObjectComponent>(VisualDebuggingComponentIds.GameObject);
        component.gameObject = newGameObject;
        ReplaceComponent(VisualDebuggingComponentIds.GameObject, component);
        return this;
    }

    public VisualDebugging RemoveGameObject() {
        RemoveComponent(VisualDebuggingComponentIds.GameObject);
        return this;
    }
}

public partial class VisualDebuggingMatcher {

    static IMatcher<VisualDebugging> _matcherGameObject;

    public static IMatcher<VisualDebugging> GameObject {
        get {
            if(_matcherGameObject == null) {
                var matcher = (Matcher<VisualDebugging>)Matcher<VisualDebugging>.AllOf(VisualDebuggingComponentIds.GameObject);
                matcher.componentNames = VisualDebuggingComponentIds.componentNames;
                _matcherGameObject = matcher;
            }

            return _matcherGameObject;
        }
    }
}
